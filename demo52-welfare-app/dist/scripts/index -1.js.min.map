{"version":3,"sources":["index -1.js"],"names":["$","window","Base","Config","MapTree","LayerGroup","MapMeasure","target","TileName","tName","docName","mName","password","port","center","projection4","minZoom","maxZoom","origin","tileSize","extend","mapTreeId","zoomInBtnGroups","zoomRestoreBtnGroups","zoomOutBtnGroups","layer_vec","layer_cva","layer_img","layer_cia","mapDocLayer","str","newobj","obj","constructor","Array","deepClone","that","stringify","JSON","parse","i","layer","layerName","layerVisibility","formatData","themesInfoArrs","second","first","Zondy","Map","TianDiTu","Enum","TiandituType","VEC","third","ol","proj","get","ip","layerType","CVA","crossOrigin","TileLayer","Doc","MapSearch","query_drawLayer","drawLayer","vectorLayer","popup","querytype","draw","measure_source","wgs84Sphere","Sphere","sketch","helpTooltipElement","helpTooltip","measureTooltipElement","measureTooltip","continuePolygonMsg","continueLineMsg","themeActive","acitiveSearch","imgLayergroup","Group","vecLayergroup","layers","roadResults","view","themesInfoArrs1","zoom","this","map","getView","getZoom","projection","controls","control","defaults","extent","collapsible","attributionOptions","MousePosition","coordinateFormat","coordinate","createStringXY","className","ZoomToExtent","mousePosition","undefinedHTML","loadLayersControl","getLayers","mt","treeContent","document","getElementById","id","getLength","array_","name","item","appendChild","elementLi","getVisible","elementInput","createElement","elementLable","type","setInnerText","getMapInfo","checked","addChangeEventMapDoc","setVisible","element","onclick","addChangeEventLayer","e","setLayerStatus","index","refresh","addChangeEventAttr","getAttribute","index3","index1","index2","ThemeArr","UniqueThemeInfoArr","IsVisible","oper","updateThemesInfo","onUniqueTheme","bind","addChangeEventTheme","Visible","flg","textContent","text","innerText","zoomOut","setZoom","zoomIn","translation","setCenter","restore","setRotation","rotation","on","operInit","config","Service","ThemeOper","source","guid","Catalog","MapDoc","docCatalog","getListSuccess","returnFullStyle","alert","empty","getMapInfos","result","attribute","value","length","children","liLists","elementUl","dataArray","ele","setAttribute","forEach","attrAr","attributeArr","updateTheme","updateTheme1","getThemesInfo","themesInfoArr","eq","uniqueThemeArr","elementLi2","elementLable2","Name","eles","indexs","Caption","elementUl2","attr","elementInput1","disabled","LinInfo","OutClr","updateTheme2","toggleMenu","hasClass","removeClass","addClass","mapListInit","css","queryByAttribute","val","QueryFeatureStruct","queryStruct","IncludeGeometry","QueryParameter","resultFormat","queryParam","recordNumber","QueryDocFeature","where","querySuccess","queryError","roadQueryByAttribute","queryService","startPressBar","clearA","IncludeAttribute","IncludeWebGraphic","struct","roadQuerySuccess","html","console","SFEleArray","title","nameIndex","idIndex","regionIndex","widthIndex","AttValue","elexy","xmax","xmin","ymax","ymin","features","drawSource","PolygonJSON","read","Vector","style","fill","color","Style","Fill","width","stroke","Stroke","addLayer","stopPressBar","lonIndex","AttStruct","FldName","latIndex","toUpperCase","addressIndex","latIndex1","newFeature","geometry","geom","Feature","setStyle","createLabelStyle","nameIndex1","vectorSource","newFeatures","image","feature","scale","Icon","src","anchorOrigin","anchorXUnits","Text","anchorYUnits","textAlign","opacity","font","setSource","drawLayer1","pointerMoveHandler","evt","measure","helpMsg","innerHTML","setPosition","LineString","addInteraction","listener","measuertype","interaction","Draw","lineDash","radius","Circle","createMeasureTooltip","tooltipCoord","output","formatLength","formatArea","getInteriorPoint","getCoordinates","getLastCoordinate","setOffset","createHelpTooltip","unByKey","offset","positioning","parentNode","removeChild","Overlay","cls","addOverlay","sourceProj","coordinates","transform","haversineDistance","ii","Math","round","c1","c2","getProjection","polygon","clone","getLinearRing","area","abs","geodesicArea","resultChange","siblings","zoom1","lon","lat","resultsSingles","format","Format","TotalCount","wrapX","addFeatures","init","clickEventsGroups","inputSearch","show","removeLayer","_that","getLayersArray","setZIndex","hide","parent","removeInteraction","find","each","meaurserVector","msSaveBlob","navigator","canvas","once","event","context","renderSync","msToBlob","toBlob","blob","len","j","removeOverlay","getOverlays","getArray","click","undefined","blur"],"mappings":"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","file":"index -1.js","sourcesContent":["'use strict';\r\n$(function () {\r\n    let Base = window.Base || {}; // 基础配置文件\r\n    let Config = window.Config || {}; // 图层树展示\r\n    let MapTree = window.MapTree || {}; // 实例化Map对象加载地图,并为其添加相关功能\r\n    let LayerGroup = window.LayerGroup || {}; // 实例化LayerGroup图层数组\r\n    let MapSearch = window.MapSearch || {}; // 地图查询相关全局变量\r\n    let MapMeasure = window.MapMeasure || {}; // 地图查询相关全局变量\r\n\r\n    // 基础配置文件\r\n    Config = {\r\n        //地图容器div的ID\r\n        target: 'mapCon',\r\n        // 瓦片地图名称\r\n        TileName: \"谷歌经纬度影像19\",\r\n        // 瓦片地图的显示名称，类似备注可以随便起名\r\n        tName: \"MapGIS Of SMX\",\r\n        // 矢量地图名称\r\n        docName: \"12345\",\r\n        // 矢量地图显示名称\r\n        mName: \"MapGIS Of 12345\",\r\n        user: \"\",\r\n        password: \"\",\r\n        // ip地址\r\n        // ip: \"10.164.251.222\",\r\n        ip: \"10.160.237.77\",\r\n        // 端口号\r\n        port: \"6163\",\r\n        // 地图中心点\r\n        center: [111.1928, 34.7808],\r\n        // 投影\r\n        projection4: \"EPSG:4326\",\r\n        projection3: \"EPSG:3857\",\r\n        // 初始缩放级别\r\n        zoom: 14,\r\n        // 最小缩放级别\r\n        minZoom: 13,\r\n        // 最大缩放级别\r\n        maxZoom: 19,\r\n        //设置旋转角度\r\n        // rotation: Math.PI / 6\r\n        rotation: 0,\r\n        //瓦片参数原点\r\n        origin: [-180, -90],\r\n        // 瓦片大小\r\n        tileSize: 256,\r\n        crossOrigin: \"anonymous\",\r\n        // 鼠标位置DOM的ID\r\n        mousePosition: 'mouse-position',\r\n        // 地图缩放延伸的区域\r\n        extend: [111.13227664319722, 34.712871905272884, 111.27904811225743, 34.80599655079968],\r\n        //图层列表容器ID\r\n        mapTreeId: \"container_left_content\",\r\n        //缩放按钮集合jQuery dom节点,例:\"#zoom-in,.zoom-in\"\r\n        zoomInBtnGroups: \"#zoom-in\",\r\n        zoomOutBtnGroups: \"#zoom-out\",\r\n        zoomRestoreBtnGroups: \"#restore\",\r\n        // 地图数组\r\n        mapArray: [MapTree.layer_vec, MapTree.layer_cva, MapTree.layer_img, MapTree.layer_cia, MapTree.mapDocLayer],\r\n        deepClone: function (obj) {\r\n            var str, newobj = obj.constructor === Array ? [] : {};\r\n            let that = this;\r\n            if (typeof obj !== 'object') {\r\n                return;\r\n            } else if (window.JSON) {\r\n                str = JSON.stringify(obj), //序列化对象\r\n                    newobj = JSON.parse(str); //还原\r\n            } else { //如果不支持以上方法\r\n                for (var i in obj) {\r\n                    newobj[i] = typeof obj[i] === 'object' ? that.deepClone(obj[i]) : obj[i];\r\n                }\r\n            }\r\n            return newobj;\r\n        }\r\n    };\r\n\r\n    // 图层树展示\r\n    MapTree = {\r\n        //  map中的图层数组\r\n        layer: [],\r\n        //  图层名称数组\r\n        layerName: [],\r\n        //  图层可见属性数组\r\n        layerVisibility: [],\r\n        // 指定地图的相关信息\r\n        formatData: [],\r\n        // 专题图信息集合\r\n        themesInfoArrs: {\r\n            first: '',\r\n            second: '',\r\n            third: ''\r\n        },\r\n        // 初始化天地图矢量图层\r\n        layer_vec: new Zondy.Map.TianDiTu({\r\n            layerType: Zondy.Enum.Map.TiandituType.VEC,\r\n            projection: ol.proj.get(Config.projection4),\r\n            ip: Config.ip,\r\n            port: Config.port,\r\n            tileSize: Config.tileSize,\r\n            crossOrigin: Config.crossOrigin\r\n        }),\r\n        // 初始化天地图注记图层\r\n        layer_cva: new Zondy.Map.TianDiTu({\r\n            layerType: Zondy.Enum.Map.TiandituType.CVA,\r\n            projection: ol.proj.get(Config.projection4),\r\n            ip: Config.ip,\r\n            port: Config.port,\r\n            tileSize: Config.tileSize,\r\n            crossOrigin: Config.crossOrigin\r\n        }),\r\n        // 初始化天地图影像图层\r\n        layer_img: new Zondy.Map.TileLayer(Config.tName, Config.TileName, {\r\n            ip: Config.ip,\r\n            port: Config.port\r\n        }),\r\n        layer_cia: new Zondy.Map.TianDiTu({\r\n            layerType: Zondy.Enum.Map.TiandituType.CIA,\r\n            projection: ol.proj.get(Config.projection4),\r\n            ip: Config.ip,\r\n            port: Config.port,\r\n            tileSize: Config.tileSize,\r\n            crossOrigin: Config.crossOrigin\r\n        }),\r\n        // 初始化12345图层\r\n        mapDocLayer: new Zondy.Map.Doc(Config.mName, Config.docName, {\r\n            ip: Config.ip,\r\n            port: Config.port\r\n        }),\r\n\r\n    };\r\n\r\n    // 地图查询相关\r\n    MapSearch = {\r\n        // 查询绘制图层\r\n        query_drawLayer: null,\r\n        drawLayer: null,\r\n        vectorLayer: null,\r\n        vectorSource: null,\r\n        // 初始化专题图服务类\r\n        oper: null,\r\n        // 鼠标点击位置\r\n        querypoint: null,\r\n        // popup对象\r\n        popup: null,\r\n        // 查询类型\r\n        querytype: 0\r\n    }\r\n\r\n    // 测量功能相关全局变量\r\n    MapMeasure = {\r\n        //绘制对象\r\n        draw: '',\r\n        // 测量类型对象\r\n        measuertype: null,\r\n        // 加载测量的绘制矢量层\r\n        measuerVector: null,\r\n        measure_source: null,\r\n        // 定义一个球对象\r\n        wgs84Sphere: new ol.Sphere(6378137),\r\n        /**\r\n         * 当前绘制的要素（Currently drawn feature.）\r\n         * @type {ol.Feature}\r\n         */\r\n        sketch: null,\r\n        /**\r\n         * 帮助提示框对象（The help tooltip element.）\r\n         * @type {Element}\r\n         */\r\n        helpTooltipElement: null,\r\n        /**\r\n         *帮助提示框显示的信息（Overlay to show the help messages.）\r\n         * @type {ol.Overlay}\r\n         */\r\n        helpTooltip: null,\r\n        /**\r\n         * 测量工具提示框对象（The measure tooltip element. ）\r\n         * @type {Element}\r\n         */\r\n        measureTooltipElement: null,\r\n        /**\r\n         *测量工具中显示的测量值（Overlay to show the measurement.）\r\n         * @type {ol.Overlay}\r\n         */\r\n        measureTooltip: null,\r\n        /**\r\n         *  当用户正在绘制多边形时的提示信息文本\r\n         * @type {string}\r\n         */\r\n        continuePolygonMsg: '鼠标单击绘制多边形',\r\n        /**\r\n         * 当用户正在绘制线时的提示信息文本\r\n         * @type {string}\r\n         */\r\n        continueLineMsg: '鼠标单击绘制线',\r\n    }\r\n\r\n    // 图层组\r\n    LayerGroup = {\r\n        // 影像+注记图层组\r\n        imgLayergroup: new ol.layer.Group({\r\n            layers: [\r\n                MapTree.layer_img,\r\n                MapTree.layer_cia\r\n            ]\r\n        }),\r\n        // 矢量+注记图层组\r\n        vecLayergroup: new ol.layer.Group({\r\n            layers: [\r\n                MapTree.layer_vec,\r\n                MapTree.layer_cva\r\n            ]\r\n        }),\r\n        // 数据图层组\r\n        dataLayergroup: null\r\n    }\r\n\r\n    // 实例化Map对象加载地图,并为其添加相关功能\r\n    Base = {\r\n        //是否获取地图视图\r\n        getMapInfos: false,\r\n        roadResults: null,\r\n        themeActive: '',\r\n        // 当前使用的搜索样式\r\n        acitiveSearch: '',\r\n        // 专题图信息\r\n        themesInfoArrs: [],\r\n        themesInfoArrs1: [],\r\n        // 地图对象\r\n        views: {\r\n            view() {\r\n                return this.map.getView();\r\n            },\r\n            zoom() {\r\n                return this.map.getZoom();\r\n            },\r\n        },\r\n        // 实例化Map对象加载地图\r\n        map: new ol.Map({\r\n            //地图容器div的ID\r\n            target: Config.target,\r\n            //地图容器中加载的图层\r\n            layers: [\r\n                //加载瓦片图层数据（OSM）及其他图层数据（加载矢量图层数据）\r\n                MapTree.layer_vec, MapTree.layer_cva, MapTree.layer_img, MapTree.layer_cia, MapTree.mapDocLayer\r\n            ],\r\n            //地图视图设置\r\n            view: new ol.View({\r\n                //地图初始中心点\r\n                center: Config.center,\r\n                //地图初始显示级别\r\n                zoom: Config.zoom,\r\n                projection: Config.projection4,\r\n                //最小级别\r\n                minZoom: Config.minZoom,\r\n                //最大级别\r\n                maxZoom: Config.maxZoom,\r\n                //设置旋转角度\r\n                rotation: Config.rotation,\r\n                // 地图延伸区域设置\r\n                extent: Config.extend\r\n            }),\r\n            // 默认扩展的控件\r\n            controls: ol.control.defaults({\r\n                //地图中默认控件\r\n                /* @type {ol.control.Attribution} */\r\n                attributionOptions: ({\r\n                    //地图数据源信息控件是否可收缩,默认为true\r\n                    collapsible: true\r\n                })\r\n            }).extend([\r\n                //鼠标位置在当前地图中位置展示\r\n                new ol.control.MousePosition({\r\n                    //坐标格式\r\n                    coordinateFormat: ol.coordinate.createStringXY(4),\r\n                    //地图投影坐标系（若未设置则输出为默认投影坐标系下的坐标）\r\n                    projection: Config.projection4,\r\n                    //坐标信息显示样式类名，默认是'ol-mouse-position'\r\n                    className: 'custom-mouse-position',\r\n                    //显示鼠标位置信息的目标容器\r\n                    target: document.getElementById(Config.mousePosition),\r\n                    //未定义坐标的标记\r\n                    undefinedHTML: '&nbsp;'\r\n                }),\r\n                // 地图延伸区域设置,效果同view.extent\r\n                new ol.control.ZoomToExtent({\r\n                    extent: Config.extend\r\n                })\r\n            ])\r\n        }),\r\n        // 图层树功能Begin\r\n        /**\r\n         * 加载图层列表数据\r\n         * @param {ol.Map} map 地图对象\r\n         * @param {string} id 图层列表容器ID\r\n         */\r\n        loadLayersControl(map, id) {\r\n            let that = this;\r\n            let mt = MapTree;\r\n            //图层目录容器\r\n            var treeContent = document.getElementById(id);\r\n            //获取地图中所有图层\r\n            var layers = map.getLayers();\r\n            // console.log(layers)\r\n            for (var i = 0; i < layers.getLength(); i++) {\r\n                if (layers.array_[i].name) {\r\n                    //获取每个图层的名称、是否可见属性\r\n                    mt.layer[i] = layers.item(i);\r\n                    mt.layerName[i] = mt.layer[i].get('name');\r\n                    mt.layerVisibility[i] = mt.layer[i].getVisible();\r\n\r\n                    //新增li元素，用来承载图层项\r\n                    var elementLi = document.createElement('li');\r\n                    // 添加子节点\r\n                    treeContent.appendChild(elementLi);\r\n                    //创建复选框元素\r\n                    var elementInput = document.createElement('input');\r\n                    elementInput.type = \"checkbox\";\r\n                    elementInput.name = \"layers\";\r\n                    elementLi.appendChild(elementInput);\r\n                    //创建label元素\r\n                    var elementLable = document.createElement('label');\r\n                    elementLable.className = \"layer\";\r\n                    //设置图层名称\r\n                    that.setInnerText(elementLable, mt.layerName[i]);\r\n                    elementLi.appendChild(elementLable);\r\n\r\n                    //设置图层默认显示状态\r\n                    if (mt.layerVisibility[i]) {\r\n                        elementInput.checked = true;\r\n                    }\r\n                    //为checkbox添加变更事件\r\n                    that.addChangeEventMapDoc(elementInput, mt.layer[i]);\r\n                }\r\n            }\r\n            that.getMapInfo();\r\n        },\r\n        /**\r\n         * 为checkbox元素绑定变更事件\r\n         * @param {input} element checkbox元素\r\n         * @param {ol.layer.Layer} layer 图层对象\r\n         * 控制图层文档的显示与隐藏\r\n         */\r\n        addChangeEventMapDoc(element, layer) {\r\n            let that = this;\r\n            element.onclick = function () {\r\n                if (element.checked) {\r\n                    //显示图层\r\n                    layer.setVisible(true);\r\n                } else {\r\n                    //不显示图层\r\n                    layer.setVisible(false);\r\n                }\r\n            };\r\n        },\r\n        /**\r\n         * 为checkbox元素绑定变更事件\r\n         * @param {input} e checkbox元素\r\n         * 控制图层的显示与隐藏\r\n         */\r\n        addChangeEventLayer(e) {\r\n            let index = e.getAttribute(\"data-index\");\r\n            e.onclick = function () {\r\n                if (e.checked) {\r\n                    //可见 e.name代表图层索引\r\n                    MapTree.mapDocLayer.setLayerStatus(index, \"include\");\r\n                    MapTree.mapDocLayer.refresh();\r\n                } else {\r\n                    //不可见 e.name代表图层索引\r\n                    MapTree.mapDocLayer.setLayerStatus(index, \"exclude\");\r\n                    MapTree.mapDocLayer.refresh();\r\n                }\r\n            };\r\n\r\n        },\r\n        /**\r\n         * 为checkbox元素绑定变更事件\r\n         * @param {input} e checkbox元素\r\n         * 控制专题图内对应属性的显示与隐藏\r\n         */\r\n        addChangeEventAttr(e) {\r\n            let that = this;\r\n            let mt = MapTree;\r\n            let index1 = e.getAttribute(\"data-index1\");\r\n            let index2 = e.getAttribute(\"data-index2\");\r\n            let index3 = e.getAttribute(\"data-index3\");\r\n            e.onclick = function () {\r\n                if (index1 == 0) {\r\n                    if (e.checked) {\r\n                        that.themesInfoArrs[0].ThemeArr[0].UniqueThemeInfoArr[index3].IsVisible = true;\r\n                        MapSearch.oper.updateThemesInfo(that.themeActive, `${index1}/${index2}`, that.themesInfoArrs, that.onUniqueTheme.bind(that));\r\n                        //调用专题图成服务功后的回调\r\n                    } else {\r\n                        that.themesInfoArrs[0].ThemeArr[0].UniqueThemeInfoArr[index3].IsVisible = false;\r\n                        MapSearch.oper.updateThemesInfo(that.themeActive, `${index1}/${index2}`, that.themesInfoArrs, that.onUniqueTheme.bind(that));\r\n                        //调用专题图成服务功后的回调\r\n                    }\r\n                } else if (index1 == 3) {\r\n                    if (e.checked) {\r\n                        that.themesInfoArrs1[0].ThemeArr[0].UniqueThemeInfoArr[index3].IsVisible = true;\r\n                        MapSearch.oper.updateThemesInfo(that.themeActive, `${index1}/${index2}`, that.themesInfoArrs1, that.onUniqueTheme.bind(that));\r\n                        //调用专题图成服务功后的回调\r\n                    } else {\r\n                        that.themesInfoArrs1[0].ThemeArr[0].UniqueThemeInfoArr[index3].IsVisible = false;\r\n                        MapSearch.oper.updateThemesInfo(that.themeActive, `${index1}/${index2}`, that.themesInfoArrs1, that.onUniqueTheme.bind(that));\r\n                        //调用专题图成服务功后的回调\r\n                    }\r\n                }\r\n            };\r\n        },\r\n        /**\r\n         * 为checkbox元素绑定变更事件\r\n         * @param {input} e checkbox元素\r\n         * 控制专题图层的显示与隐藏\r\n         */\r\n        addChangeEventTheme(e) {\r\n            let that = this;\r\n            let mt = MapTree;\r\n            let index1 = e.getAttribute(\"data-index1\");\r\n            let index2 = e.getAttribute(\"data-index2\");\r\n            e.onclick = function () {\r\n                if (e.checked) {\r\n                    that.themesInfoArrs[index1].ThemeArr[index2].Visible = true;\r\n                    MapSearch.oper.updateThemesInfo(that.themeActive, `${index1}/${index2}`, that.themesInfoArrs, that.onUniqueTheme.bind(that));\r\n                    //调用专题图成服务功后的回调\r\n                } else {\r\n                    that.themesInfoArrs[index1].ThemeArr[index2].Visible = false;\r\n                    MapSearch.oper.updateThemesInfo(that.themeActive, `${index1}/${index2}`, that.themesInfoArrs, that.onUniqueTheme.bind(that));\r\n                    //调用专题图成服务功后的回调\r\n                }\r\n            };\r\n        },\r\n        //调用专题图成服务功后的回调\r\n        onUniqueTheme(flg) {\r\n            let that = this;\r\n            if (flg) {\r\n                //刷新地图，即重新加载生成专题图后的地图文档\r\n                MapTree.mapDocLayer.refresh();\r\n            } else {\r\n                return false;\r\n            }\r\n        },\r\n        /**\r\n         * 动态设置元素文本内容（兼容）\r\n         */\r\n        setInnerText(element, text) {\r\n            if (typeof element.textContent == \"string\") {\r\n                element.textContent = text;\r\n            } else {\r\n                element.innerText = text;\r\n            }\r\n        },\r\n        // 图层树功能End\r\n\r\n        // 缩小,放大,平移到指定位置,复位.Begin\r\n        // 单击缩小功能\r\n        zoomOut() {\r\n            //获取地图视图\r\n            var view = this.map.getView();\r\n            //获得当前缩放级数\r\n            var zoom = view.getZoom();\r\n            //地图缩小一级\r\n            view.setZoom(zoom - 1);\r\n        },\r\n        // 单击放大功能\r\n        zoomIn() {\r\n            //获取地图视图\r\n            var view = this.map.getView();\r\n            //获得当前缩放级数\r\n            var zoom = view.getZoom();\r\n            //地图放大一级\r\n            view.setZoom(zoom + 1);\r\n        },\r\n        // 单击平移功能,后续功能待添加\r\n        translation() {\r\n            //获取地图视图\r\n            var view = this.map.getView();\r\n            //获得当前缩放级数\r\n            var zoom = view.getZoom();\r\n            //地图放大一级\r\n            //设置是否变化缩放级别\r\n            // view.setZoom(zoom );\r\n            //重新设置中心点\r\n            view.setCenter([111.2, 34.76]);\r\n        },\r\n        //复位功能（复位到初始状态）\r\n        restore() {\r\n            //获取地图视图\r\n            var view = this.map.getView();\r\n            //初始中心点\r\n            view.setCenter(Config.center);\r\n            //初始旋转角度\r\n            view.setRotation(Config.rotation);\r\n            //初始缩放级数\r\n            view.setZoom(Config.zoom);\r\n        },\r\n        // 点击事件集合\r\n        clickEventsGroups() {\r\n            let that = this;\r\n            $(Config.zoomOutBtnGroups).on('click', () => {\r\n                that.zoomOut();\r\n            });\r\n            $(Config.zoomInBtnGroups).on('click', () => {\r\n                that.zoomIn();\r\n            });\r\n            $('#panto').on('click', () => {\r\n                that.translation();\r\n            });\r\n            $(Config.zoomRestoreBtnGroups).on('click', () => {\r\n                that.restore();\r\n            });\r\n        },\r\n        // 缩小,放大,平移到指定位置,复位.End\r\n\r\n        //初始化专题图服务类\r\n        operInit() {\r\n\r\n            let mt = MapTree;\r\n            let config = Config;\r\n            MapSearch.oper = new Zondy.Service.ThemeOper();\r\n            MapSearch.oper.ip = config.ip;\r\n            MapSearch.oper.port = config.port;\r\n            MapSearch.oper.guid = mt.mapDocLayer.source.guid;\r\n        },\r\n        /* ===矢量地图文档目录服务（获取指定地图信息）=== */\r\n\r\n        //获取指定地图信息\r\n        getMapInfo() {\r\n            let that = this;\r\n            //实例化Zondy.Service.Catalog.MapDoc类，设置操作的地图文档为用户指定的地图文档,地图为索引值为0的地图\r\n            var docCatalog = new Zondy.Service.Catalog.MapDoc({\r\n                ip: Config.ip,\r\n                port: Config.port,\r\n                //设置地图文档的名称\r\n                docName: Config.docName,\r\n                //设置地图的索引号\r\n                mapIndex: 0,\r\n                //是否返回由DWS所返回的原始格式信息\r\n                returnFullStyle: true\r\n            });\r\n            //调用getMapInfo函数，获取地图相关信息，在回调函数中处理结果\r\n            docCatalog.getMapInfo(that.getListSuccess.bind(this), true, true);\r\n        },\r\n        //获取服务器地图文档列表成功后的回调函数\r\n        getListSuccess(result) {\r\n            let that = this;\r\n            let mt = MapTree;\r\n            if (result.length == 0) {\r\n                alert(\"没有获取到矢量地图文档！\");\r\n                $(\"#reslutTable\").empty(); //清空结果显示面板\r\n                return;\r\n            } else if (that.getMapInfos) {\r\n                return;\r\n            } else {\r\n                //将一个JSON转换成一个包含JSON文本的字符串\r\n                mt.formatData = JSON.parse(result.attribute[0].value);\r\n                // console.log('====================================');\r\n                // console.log(mt.formatData);\r\n                // console.log('====================================');\r\n                //将结果显示在指定的div\r\n                // Process(formatData, 1, \"reslutTable\");\r\n                let id = \"#\" + Config.mapTreeId;\r\n                let dataArray = JSON.parse(result.attribute[0].value);\r\n                //图层目录容器\r\n                let length = $(id).children('li').length;\r\n                let liLists = $(id).children(`li`)[length - 1];\r\n\r\n                // if (!liLists.children('ul')) {\r\n\r\n                // }\r\n                var elementUl = document.createElement('ul');\r\n                dataArray.forEach((ele, i) => {\r\n                    if (ele) {\r\n                        //获取每个图层的名称、是否可见属性\r\n                    //新增li元素，用来承载图层项\r\n                    var elementLi = document.createElement('li');\r\n                    // 添加子节点\r\n                    elementUl.appendChild(elementLi);\r\n                    //创建复选框元素\r\n                    var elementInput = document.createElement('input');\r\n                    elementInput.type = \"checkbox\";\r\n                    elementInput.checked = true;\r\n                    // elementInput.name = i;\r\n                    elementInput.setAttribute(\"data-index\", i);\r\n                    // elementInput.attributes = true;\r\n                    elementLi.appendChild(elementInput);\r\n                    //创建label元素\r\n                    var elementLable = document.createElement('label');\r\n                    elementLable.className = \"layer\";\r\n                    //设置图层名称\r\n                    let attrAr = ele.attributeArr;\r\n                    attrAr.forEach((element, index) => {\r\n                        if (element.name == 'name') {\r\n                            elementInput.name = element.value;\r\n                            elementLable.innerText = element.value;\r\n                        }\r\n                    });\r\n                    elementLi.appendChild(elementLable);\r\n\r\n                    //设置图层默认显示状态\r\n                    // if (mt.layerVisibility[i]) {\r\n                    //     elementInput.checked = true;\r\n                    // }\r\n                    //为checkbox添加变更事件\r\n\r\n                    that.addChangeEventLayer(elementInput);\r\n                    }\r\n                });\r\n                liLists.appendChild(elementUl);\r\n                that.getMapInfos = true;\r\n                that.updateTheme();\r\n                that.updateTheme1();\r\n                that.updateTheme2();\r\n            }\r\n        },\r\n\r\n        //更新专题图\r\n        updateTheme() {\r\n            let that = this;\r\n            let mt = MapTree;\r\n            MapSearch.oper.getThemesInfo(Config.docName, \"0/0\", function (themesInfoArr) {\r\n                that.themesInfoArrs = themesInfoArr;\r\n                that.themeActive = Config.docName;\r\n                if (themesInfoArr.length > 0 && themesInfoArr[0].ThemeArr != null) {\r\n                    // 更新专题图信息\r\n                    let id = \"#\" + Config.mapTreeId;\r\n                    //图层目录容器\r\n                    let length = $(id).children('li').length;\r\n                    let liLists = $(id).children(`li`).eq(length - 1).children('ul').children('li')[0];\r\n                    var elementUl = document.createElement('ul');\r\n                    themesInfoArr.forEach((ele, i) => {\r\n                        //设置图层名称\r\n                        let attrAr = ele.ThemeArr;\r\n                        attrAr.forEach((element, index) => {\r\n                            let uniqueThemeArr = element.UniqueThemeInfoArr;\r\n                            var elementUl2 = document.createElement('ul');\r\n                            //获取每个图层的名称、是否可见属性\r\n                            //新增li元素，用来承载图层项\r\n                            var elementLi2 = document.createElement('li');\r\n                            // 添加子节点\r\n                            elementUl2.appendChild(elementLi2);\r\n                            //创建复选框元素\r\n                            // var elementInput2 = document.createElement('input');\r\n                            // elementInput2.type = \"checkbox\";\r\n                            // elementInput2.checked = true;\r\n                            // // elementInput.name = i;\r\n                            // elementInput2.setAttribute(\"data-index1\", i);\r\n                            // elementInput2.setAttribute(\"data-index2\", index);\r\n                            // // elementInput.attributes = true;\r\n                            // elementLi2.appendChild(elementInput2);\r\n                            //创建label元素\r\n                            var elementLable2 = document.createElement('label');\r\n                            elementLable2.className = \"layer\";\r\n                            elementLable2.innerText = element.Name;\r\n                            elementLi2.appendChild(elementLable2);\r\n                            // 控制专题图展示\r\n                            // that.addChangeEventTheme(elementInput2);\r\n\r\n                            uniqueThemeArr.forEach((eles, indexs) => {\r\n                                //获取每个图层的名称、是否可见属性\r\n                                //新增li元素，用来承载图层项\r\n                                var elementLi = document.createElement('li');\r\n                                // 添加子节点\r\n                                elementUl.appendChild(elementLi);\r\n                                //创建复选框元素\r\n                                var elementInput = document.createElement('input');\r\n                                elementInput.type = \"checkbox\";\r\n                                elementInput.checked = true;\r\n                                // elementInput.name = i;\r\n                                elementInput.setAttribute(\"data-index1\", i);\r\n                                elementInput.setAttribute(\"data-index2\", index);\r\n                                elementInput.setAttribute(\"data-index3\", indexs);\r\n                                // elementInput.attributes = true;\r\n                                elementLi.appendChild(elementInput);\r\n                                //创建label元素\r\n                                var elementLable = document.createElement('label');\r\n                                elementLable.className = \"layer\";\r\n                                elementLable.innerText = eles.Caption;\r\n                                elementLi.appendChild(elementLable);\r\n                                that.addChangeEventAttr(elementInput);\r\n                                elementLi2.appendChild(elementUl);\r\n                            });\r\n                            liLists.appendChild(elementUl2);\r\n                        });\r\n                        //设置图层默认显示状态\r\n                        // if (mt.layerVisibility[i]) {\r\n                        //     elementInput.checked = true;\r\n                        // }\r\n                        //为checkbox添加变更事件\r\n                    });\r\n                    // if (i == themesInfoArr[0].ThemeArr.length)\r\n                    //     alert(\"没有该专题信息\");\r\n                } else\r\n                    alert(\"没有该专题信息\");\r\n            });\r\n        },\r\n        updateTheme1() {\r\n            let that = this;\r\n            let mt = MapTree;\r\n            MapSearch.oper.getThemesInfo(Config.docName, \"2/0\", function (themesInfoArr) {\r\n                that.themesInfoArrs1 = themesInfoArr;\r\n                that.themeActive = Config.docName;\r\n                if (themesInfoArr.length > 0 && themesInfoArr[0].ThemeArr != null) {\r\n                    // 更新专题图信息\r\n                    let id = \"#\" + Config.mapTreeId;\r\n                    //图层目录容器\r\n                    let length = $(id).children('li').length;\r\n                    let liLists = $(id).children(`li`).eq(length - 1).children('ul').children('li')[2];\r\n                    let index1 = $(id).children(`li`).eq(length - 1).children('ul').children('li').eq(2).children('input').attr('data-index');\r\n                    \r\n\r\n                    let elementUl = document.createElement('ul');\r\n                    themesInfoArr.forEach((ele, i) => {\r\n                        \r\n                        //设置图层名称\r\n                        let attrAr = ele.ThemeArr;\r\n                        attrAr.forEach((element, index) => {\r\n                            let uniqueThemeArr = element.UniqueThemeInfoArr;\r\n                            var elementUl2 = document.createElement('ul');\r\n                            //获取每个图层的名称、是否可见属性\r\n                            //新增li元素，用来承载图层项\r\n                            var elementLi2 = document.createElement('li');\r\n                            // 添加子节点\r\n                            elementUl2.appendChild(elementLi2);\r\n                            //创建复选框元素\r\n                            // var elementInput2 = document.createElement('input');\r\n                            // elementInput2.type = \"checkbox\";\r\n                            // elementInput2.checked = true;\r\n                            // // elementInput.name = i;\r\n                            // elementInput2.setAttribute(\"data-index1\", i);\r\n                            // elementInput2.setAttribute(\"data-index2\", index);\r\n                            // // elementInput.attributes = true;\r\n                            // elementLi2.appendChild(elementInput2);\r\n                            //创建label元素\r\n                            var elementLable2 = document.createElement('label');\r\n                            elementLable2.className = \"layer\";\r\n                            elementLable2.innerText = element.Name;\r\n                            elementLi2.appendChild(elementLable2);\r\n                            // 控制专题图展示\r\n                            // that.addChangeEventTheme(elementInput2);\r\n\r\n                            uniqueThemeArr.forEach((eles, indexs) => {\r\n                                //获取每个图层的名称、是否可见属性\r\n                                //新增li元素，用来承载图层项\r\n                                var elementLi = document.createElement('li');\r\n                                // 添加子节点\r\n                                elementUl.appendChild(elementLi);\r\n                                //创建复选框元素\r\n                                var elementInput = document.createElement('input');\r\n                                var elementInput1 = document.createElement('input');\r\n                                elementInput.type = \"checkbox\";\r\n                                elementInput1.type = \"color\";\r\n                                elementInput.checked = true;\r\n                                elementInput1.disabled = true;\r\n                                // elementInput.name = i;\r\n                                if (indexs == 0) {\r\n                                    elementInput1.value = '#00FF00';\r\n                                }\r\n                                if (indexs == 1) {\r\n                                    elementInput1.value = '#00B7D7';\r\n                                }\r\n                                if (indexs == 2) {\r\n                                    elementInput1.value = '#F7B5CB';\r\n                                }\r\n                                if (indexs == 3) {\r\n                                    elementInput1.value = '#F200A5';\r\n                                }\r\n                                elementInput.setAttribute(\"data-index1\", index1);\r\n                                elementInput.setAttribute(\"data-index2\", index);\r\n                                elementInput.setAttribute(\"data-index3\", indexs);\r\n                                elementInput1.setAttribute(\"data-colorCode\", eles.LinInfo.OutClr[0]);\r\n                                elementInput1.setAttribute(\"data-index\", indexs);\r\n                                // elementInput.attributes = true;\r\n                                elementLi.appendChild(elementInput);\r\n                                //创建label元素\r\n                                var elementLable = document.createElement('label');\r\n                                elementLable.className = \"layer\";\r\n                                elementLable.innerText = eles.Caption;\r\n                                elementLi.appendChild(elementLable);\r\n                                elementLi.appendChild(elementInput1);\r\n                                that.addChangeEventAttr(elementInput);\r\n                                elementLi2.appendChild(elementUl);\r\n                            });\r\n                            liLists.appendChild(elementUl2);\r\n                        });\r\n                        //设置图层默认显示状态\r\n                        // if (mt.layerVisibility[i]) {\r\n                        //     elementInput.checked = true;\r\n                        // }\r\n                        //为checkbox添加变更事件\r\n                        \r\n                    });\r\n                    \r\n                    // if (i == themesInfoArr[0].ThemeArr.length)\r\n                    //     alert(\"没有该专题信息\");\r\n                } else\r\n                    alert(\"没有该专题信息\");\r\n            });\r\n        },\r\n        updateTheme2() {\r\n            let that = this;\r\n            let mt = MapTree;\r\n            MapSearch.oper.getThemesInfo(Config.docName, \"3/0\", function (themesInfoArr) {\r\n                that.themesInfoArrs1 = themesInfoArr;\r\n                that.themeActive = Config.docName;\r\n                if (themesInfoArr.length > 0 && themesInfoArr[0].ThemeArr != null) {\r\n                    // 更新专题图信息\r\n                    let id = \"#\" + Config.mapTreeId;\r\n                    //图层目录容器\r\n                    let length = $(id).children('li').length;\r\n                    let liLists = $(id).children(`li`).eq(length - 1).children('ul').children('li')[3];\r\n                    let index1 = $(id).children(`li`).eq(length - 1).children('ul').children('li').eq(3).children('input').attr('data-index');\r\n                    \r\n\r\n                    let elementUl = document.createElement('ul');\r\n                    themesInfoArr.forEach((ele, i) => {\r\n                        \r\n                        //设置图层名称\r\n                        let attrAr = ele.ThemeArr;\r\n                        attrAr.forEach((element, index) => {\r\n                            let uniqueThemeArr = element.UniqueThemeInfoArr;\r\n                            var elementUl2 = document.createElement('ul');\r\n                            //获取每个图层的名称、是否可见属性\r\n                            //新增li元素，用来承载图层项\r\n                            var elementLi2 = document.createElement('li');\r\n                            // 添加子节点\r\n                            elementUl2.appendChild(elementLi2);\r\n                            //创建复选框元素\r\n                            // var elementInput2 = document.createElement('input');\r\n                            // elementInput2.type = \"checkbox\";\r\n                            // elementInput2.checked = true;\r\n                            // // elementInput.name = i;\r\n                            // elementInput2.setAttribute(\"data-index1\", i);\r\n                            // elementInput2.setAttribute(\"data-index2\", index);\r\n                            // // elementInput.attributes = true;\r\n                            // elementLi2.appendChild(elementInput2);\r\n                            //创建label元素\r\n                            var elementLable2 = document.createElement('label');\r\n                            elementLable2.className = \"layer\";\r\n                            elementLable2.innerText = element.Name;\r\n                            elementLi2.appendChild(elementLable2);\r\n                            // 控制专题图展示\r\n                            // that.addChangeEventTheme(elementInput2);\r\n\r\n                            uniqueThemeArr.forEach((eles, indexs) => {\r\n                                //获取每个图层的名称、是否可见属性\r\n                                //新增li元素，用来承载图层项\r\n                                var elementLi = document.createElement('li');\r\n                                // 添加子节点\r\n                                elementUl.appendChild(elementLi);\r\n                                //创建复选框元素\r\n                                var elementInput = document.createElement('input');\r\n                                var elementInput1 = document.createElement('input');\r\n                                elementInput.type = \"checkbox\";\r\n                                elementInput1.type = \"color\";\r\n                                elementInput.checked = true;\r\n                                elementInput1.disabled = true;\r\n                                // elementInput.name = i;\r\n                                if (indexs == 0) {\r\n                                    elementInput1.value = '#FFBFA3';\r\n                                }\r\n                                if (indexs == 1) {\r\n                                    elementInput1.value = '#FFDF87';\r\n                                }\r\n                                elementInput.setAttribute(\"data-index1\", index1);\r\n                                elementInput.setAttribute(\"data-index2\", index);\r\n                                elementInput.setAttribute(\"data-index3\", indexs);\r\n                                elementInput1.setAttribute(\"data-colorCode\", eles.LinInfo.OutClr[0]);\r\n                                elementInput1.setAttribute(\"data-index\", indexs);\r\n                                // elementInput.attributes = true;\r\n                                elementLi.appendChild(elementInput);\r\n                                //创建label元素\r\n                                var elementLable = document.createElement('label');\r\n                                elementLable.className = \"layer\";\r\n                                elementLable.innerText = eles.Caption;\r\n                                elementLi.appendChild(elementLable);\r\n                                elementLi.appendChild(elementInput1);\r\n                                that.addChangeEventAttr(elementInput);\r\n                                elementLi2.appendChild(elementUl);\r\n                            });\r\n                            liLists.appendChild(elementUl2);\r\n                        });\r\n                        //设置图层默认显示状态\r\n                        // if (mt.layerVisibility[i]) {\r\n                        //     elementInput.checked = true;\r\n                        // }\r\n                        //为checkbox添加变更事件\r\n                        \r\n                    });\r\n                    \r\n                    // if (i == themesInfoArr[0].ThemeArr.length)\r\n                    //     alert(\"没有该专题信息\");\r\n                } else\r\n                    alert(\"没有该专题信息\");\r\n            });\r\n        },\r\n        //左侧功能栏切换\r\n        toggleMenu() {\r\n            if ($(\".menu-trigger\").hasClass(\"on\")) {\r\n                $(\".menu-trigger\").removeClass(\"on\").addClass(\"off\");\r\n                $(\".container_left\").css(\"left\", \"-20%\");\r\n                $(\".menu-trigger\").text(\"》\");\r\n            } else {\r\n                $(\".menu-trigger\").removeClass(\"off\").addClass(\"on\");\r\n                $(\".menu-trigger\").text(\"《\");\r\n                $(\".container_left\").css(\"left\", 0);\r\n            }\r\n        },\r\n        // 初始化右下角天地图设置\r\n        mapListInit() {\r\n            $(\"#vecmap\").css(\"border-color\", \"rgba(255, 255, 255,0.8)\");\r\n            $(\"#imgmap\").css(\"border-color\", \"rgba(0, 255, 255,0.8)\");\r\n        },\r\n\r\n        // 搜索功能Begin\r\n\r\n        // 属性查询\r\n        queryByAttribute(val) {\r\n            //startPressBar();\r\n            //初始化查询结构对象，设置查询结构包含几何信息\r\n            let that = this;\r\n            var queryStruct = new Zondy.Service.QueryFeatureStruct();\r\n            queryStruct.IncludeGeometry = true;\r\n            //实例化查询参数对象\r\n            var queryParam = new Zondy.Service.QueryParameter({\r\n                resultFormat: \"json\",\r\n                struct: queryStruct\r\n            });\r\n            //设置查询分页号\r\n            queryParam.pageIndex = 0;\r\n            //设置查询要素数目\r\n            queryParam.recordNumber = 50;\r\n\r\n            // queryParam.where = name;\r\n            var name = `name like '%${val}%'`;\r\n            queryParam.where = name;\r\n\r\n            //实例化地图文档查询服务对象\r\n            var queryService = new Zondy.Service.QueryDocFeature(queryParam, Config.docName, 4, {\r\n                ip: Config.ip,\r\n                port: Config.port\r\n            });\r\n            //执行查询操作，querySuccess为查询回调函数\r\n            queryService.query(that.querySuccess.bind(that), that.queryError.bind(that));\r\n        },\r\n        //道路查询\r\n        roadQueryByAttribute(val) {\r\n            let that = this;\r\n            that.startPressBar();\r\n            that.clearA();\r\n            //初始化查询结构对象，设置查询结构包含几何信息\r\n            var queryStruct = new Zondy.Service.QueryFeatureStruct();\r\n            //是否包含几何图形信息\r\n            queryStruct.IncludeGeometry = true;\r\n            //是否包含属性信息\r\n            queryStruct.IncludeAttribute = true;\r\n            //是否包含图形显示参数\r\n            queryStruct.IncludeWebGraphic = false;\r\n            //实例化查询参数对象\r\n            var queryParam = new Zondy.Service.QueryParameter({\r\n                resultFormat: \"json\",\r\n                struct: queryStruct\r\n            });\r\n            //设置查询分页号\r\n            queryParam.pageIndex = 0;\r\n            //设置查询要素数目\r\n            queryParam.recordNumber = 60;\r\n\r\n            // var name = `name like '%崤山%'`;\r\n            var name = `name like '%${val}%'`;\r\n            queryParam.where = name;\r\n\r\n            \r\n            //实例化地图文档查询服务对象\r\n            var queryService = new Zondy.Service.QueryDocFeature(queryParam, Config.docName, 2, {\r\n                ip: Config.ip,\r\n                port: Config.port\r\n            });\r\n            //执行查询操作，querySuccess为查询回调函数\r\n            queryService.query(that.roadQuerySuccess.bind(that), that.queryError.bind(that));\r\n        },\r\n        roadQuerySuccess(result) {\r\n            let that = this;\r\n            console.log(result);\r\n            $('#reslutTable ul').html('');\r\n            //停止进度条\r\n            that.roadResults = result;\r\n            that.stopPressBar();\r\n            \r\n            \r\n\r\n            var formatData = JSON.stringify(result);\r\n            \r\n            var title = result.AttStruct.FldName;\r\n            var dataArray = result.SFEleArray;\r\n            var html = '';\r\n            var nameIndex = '';\r\n            var widthIndex = '';\r\n            var idIndex = '';\r\n            var regionIndex = '';\r\n            title.forEach((ele, index) => {\r\n                if (ele.toUpperCase() == 'NAME') {\r\n                    nameIndex = index;\r\n                }\r\n                if (ele.toUpperCase() == 'WIDTH') {\r\n                    widthIndex = index;\r\n                }\r\n                if (ele.toLowerCase() == 'property_type') {\r\n                    idIndex = index;\r\n                }\r\n                if (ele.toUpperCase() == 'region') {\r\n                    regionIndex = index;\r\n                }\r\n            });\r\n            if (nameIndex >= 0 && dataArray) {\r\n                that.clearA();\r\n                for (var i = 0; i < dataArray.length; i++) {\r\n                    var eles = dataArray[i].AttValue;\r\n                    var elexy = dataArray[i].bound;\r\n                    \r\n                    html += `\r\n                        <li data-index=\"${i}\" data-width=\"${eles[widthIndex]}\" data-id=\"${eles[idIndex]}\" data-xmax=\"${(elexy.xmax+elexy.xmin)/2}\" data-ymax=\"${(elexy.ymax+elexy.ymin)/2}\">\r\n                            <p>${eles[nameIndex]}</p>\r\n                            <p style=\"display:none\">${eles[widthIndex]}</p>\r\n                            <p>${eles[idIndex]}</p>\r\n                            <p style=\"display:none\">${elexy.xmax}</p>\r\n                            <p style=\"display:none\">${elexy.ymax}</p>\r\n                        </li>`\r\n                }\r\n                $('#reslutTable ul').html(html);\r\n                $('#reslutTable ul li:eq(0)').addClass('search-active');\r\n                // Process(formatData, 1, \"reslutTable\");\r\n                //初始化Zondy.Format.PolygonJSON类\r\n                var format = new Zondy.Format.PolygonJSON();\r\n                //将MapGIS要素JSON反序列化为ol.Feature类型数组\r\n                var features = format.read(result);\r\n\r\n                //实例化一个矢量图层drawLayerr用于高亮显示结果\r\n                var drawSource = new ol.source.Vector({\r\n                    wrapX: false\r\n                });\r\n                drawSource.addFeatures(features);\r\n                that.drawLayer = new ol.layer.Vector({\r\n                    source: drawSource,\r\n                    style: new ol.style.Style({\r\n                        //填充色\r\n                        fill: new ol.style.Fill({\r\n                            color: 'rgba(255, 0, 0, 0.5)'\r\n                        }),\r\n                        //边线样式\r\n                        stroke: new ol.style.Stroke({\r\n                            color: 'rgba(255,0, 0, 1)',\r\n                            width: 10\r\n                        })\r\n                    })\r\n                });\r\n\r\n                that.map.addLayer(that.drawLayer);\r\n\r\n                // map.setView(new ol.View({\r\n                //     center: [42, -25],\r\n                //     zoom: 2,\r\n                //     projection: 'EPSG:4326'\r\n                // }));\r\n\r\n            } else {\r\n                html = '<li class=\"no-datas\">暂无搜索结果</li>';\r\n                $('#reslutTable ul').html(html);\r\n                // $('#reslutTable ul li:eq(0)').addClass('search-active');\r\n            }\r\n\r\n        },\r\n        //查询失败回调\r\n        queryError(e) {\r\n            let that = this;\r\n            //停止进度条\r\n            that.stopPressBar();\r\n        },\r\n\r\n        //属性查询成功回调\r\n        querySuccess(result) {\r\n            let that = this;\r\n            var newFeatures = [];\r\n            $('#reslutTable ul').html('');\r\n            //停止进度条\r\n            that.stopPressBar();\r\n\r\n            var formatData = JSON.stringify(result);\r\n            \r\n            var title = result.AttStruct.FldName;\r\n            var dataArray = result.SFEleArray;\r\n            var html = '';\r\n            var nameIndex = '';\r\n            var addressIndex = '';\r\n            var lonIndex = '';\r\n            var latIndex = '';\r\n            title.forEach((ele, index) => {\r\n                if (ele.toUpperCase() == 'NAME') {\r\n                    nameIndex = index;\r\n                }\r\n                if (ele.toUpperCase() == 'ADDNAME') {\r\n                    addressIndex = index;\r\n                }\r\n                if (ele.toUpperCase() == 'LON') {\r\n                    lonIndex = index;\r\n                }\r\n                if (ele.toUpperCase() == 'LAT') {\r\n                    latIndex = index;\r\n                }\r\n            });\r\n            if (nameIndex >= 0 && addressIndex >= 0 && lonIndex >= 0 && latIndex >= 0 && dataArray) {\r\n                that.clearA();\r\n                //vectorLayer = null;\r\n                //删除图层\r\n\r\n                for (var i = 0; i < dataArray.length; i++) {\r\n\r\n                    var eles = dataArray[i].AttValue;\r\n                    //\r\n                    var lonIndex1 = eles[lonIndex] - 0;\r\n                    var latIndex1 = eles[latIndex] - 0;\r\n                    var nameIndex1 = eles[nameIndex];\r\n                    //实例化Vector要素，通过矢量图层添加到地图容器中\r\n                    //新建一个要素 ol.Feature\r\n                    var newFeature = new ol.Feature({\r\n                        //几何信息\r\n                        geometry: new ol.geom.Point([lonIndex1, latIndex1]),\r\n                        //名称属性\r\n                        name: nameIndex1\r\n                    });\r\n                    //设置要素的样式\r\n                    newFeature.setStyle(that.createLabelStyle(newFeature));\r\n                    newFeatures.push(newFeature);\r\n\r\n\r\n                    //将新要素添加到数据源中\r\n                    //vectorSource.addFeature(newFeature);\r\n\r\n                    html += `\r\n                <li data-lon=\"${eles[lonIndex]}\" data-lat=\"${eles[latIndex]}\">\r\n                    <p>${eles[nameIndex]}</p>\r\n                    <p>${eles[addressIndex]}</p>\r\n                    <p style=\"display:none;\">${eles[lonIndex]}</p>\r\n                    <p style=\"display:none;>${eles[latIndex]}</p>\r\n                </li>`\r\n                }\r\n                $('#reslutTable ul').html(html);\r\n                //矢量标注的数据源\r\n                that.vectorSource = new ol.source.Vector({\r\n                    features: newFeatures\r\n                });\r\n                //矢量标注图层\r\n                that.vectorLayer = new ol.layer.Vector({\r\n                    source: that.vectorSource\r\n                });\r\n\r\n                that.map.addLayer(that.vectorLayer);\r\n            } else {\r\n                html = '<li class=\"no-datas\">暂无搜索结果</li>';\r\n                $('#reslutTable ul').html(html);\r\n            }\r\n        },\r\n        //poi添加点\r\n        /**\r\n         * 创建矢量标注样式函数,设置image为图标ol.style.Icon\r\n         * @param {ol.Feature} feature 要素\r\n         */\r\n        createLabelStyle(feature) {\r\n            return new ol.style.Style({\r\n                image: new ol.style.Icon(\r\n                    /** @type {olx.style.IconOptions} */\r\n                    ({\r\n                        anchor: [0.5, 0.1],\r\n                        anchorOrigin: 'bottom-left',\r\n                        anchorXUnits: 'fraction',\r\n                        anchorYUnits: 'pixels',\r\n                        offsetOrigin: 'bottom-left',\r\n                        // offset:[0,10],\r\n                        // 图标缩放比例\r\n                        scale: 0.3,\r\n                        //透明度\r\n                        opacity: 1,\r\n                        //图标的url\r\n                        src: 'images/location-1.png'\r\n                    })),\r\n                text: new ol.style.Text({\r\n                    //位置\r\n                    textAlign: 'center',\r\n                    //基准线\r\n                    textBaseline: 'middle',\r\n                    //文字样式\r\n                    font: 'normal 12px 微软雅黑',\r\n                    //文本内容\r\n                    text: feature.get('name'),\r\n                    //文本填充样式（即文字颜色）\r\n                    fill: new ol.style.Fill({\r\n                        color: '#aa3300'\r\n                    }),\r\n                    stroke: new ol.style.Stroke({\r\n                        color: '#ffcc33',\r\n                        width: 2\r\n                    })\r\n                })\r\n            });\r\n        },\r\n        //清除客户端查询结果信息\r\n        clearA() {\r\n            //停止进度条\r\n            let that = this;\r\n            that.stopPressBar();\r\n            if (that.vectorLayer) {\r\n                //map.removeLayer(vectorLayer);\r\n                that.vectorSource = null;\r\n                //清空绘制图形\r\n                that.vectorLayer.setSource(that.vectorSource);\r\n                that.map.addLayer(that.vectorLayer);\r\n            }\r\n\r\n            if (that.drawLayer) {\r\n                //map.removeLayer(drawLayer);\r\n                that.drawSource = null;\r\n                //清空绘制图形\r\n                that.drawLayer.setSource(that.drawSource);\r\n                that.map.addLayer(that.drawLayer);\r\n            }\r\n\r\n            if (that.drawLayer1) {\r\n                //map.removeLayer(drawLayer);\r\n                that.drawSource = null;\r\n                //清空绘制图形\r\n                that.drawLayer1.setSource(that.drawSource);\r\n                that.map.addLayer(that.drawLayer1);\r\n            }\r\n        },\r\n        //停止进度条\r\n        stopPressBar() {\r\n            $('#preview').css(\"display\", \"none\");\r\n        },\r\n        //开始进度条动画\r\n        startPressBar() {\r\n            $('#preview').css(\"display\", \"block\");\r\n        },\r\n        //搜索END\r\n\r\n        //测绘Begin\r\n        /**\r\n         * 鼠标移动事件处理函数\r\n         * @param {ol.MapBrowserEvent} evt\r\n         */\r\n        pointerMoveHandler(evt) {\r\n            let measure = MapMeasure;\r\n            let that = this;\r\n            if (evt.dragging) {\r\n                return;\r\n            }\r\n            /** @type {string} */\r\n            var helpMsg = '鼠标单击开始绘制'; //当前默认提示信息\r\n            //判断绘制几何类型设置相应的帮助提示信息\r\n            if (measure.sketch) {\r\n                var geom = (measure.sketch.getGeometry());\r\n                if (geom instanceof ol.geom.Polygon) {\r\n                    helpMsg = measure.continuePolygonMsg; //绘制多边形时提示相应内容\r\n                } else if (geom instanceof ol.geom.LineString) {\r\n                    helpMsg = measure.continueLineMsg; //绘制线时提示相应内容\r\n                }\r\n            }\r\n            measure.helpTooltipElement.innerHTML = helpMsg; //将提示信息设置到对话框中显示\r\n            measure.helpTooltip.setPosition(evt.coordinate); //设置帮助提示框的位置\r\n            $(measure.helpTooltipElement).removeClass('hidden'); //移除帮助提示框的隐藏样式进行显示\r\n        },\r\n        /**\r\n         * 加载交互绘制控件函数\r\n         */\r\n        addInteraction() {\r\n            let measure = MapMeasure;\r\n            let that = this;\r\n            var type = (measure.measuertype == '面积测量' ? 'Polygon' : 'LineString');\r\n            measure.draw = new ol.interaction.Draw({\r\n                source: measure.measure_source, //测量绘制层数据源\r\n                type: /** @type {ol.geom.GeometryType} */ (type), //几何图形类型\r\n                style: new ol.style.Style({ //绘制几何图形的样式\r\n                    fill: new ol.style.Fill({\r\n                        color: 'rgba(255, 255, 255, 0.2)'\r\n                    }),\r\n                    stroke: new ol.style.Stroke({\r\n                        color: 'rgba(0, 0, 0, 0.5)',\r\n                        lineDash: [10, 10],\r\n                        width: 2\r\n                    }),\r\n                    image: new ol.style.Circle({\r\n                        radius: 5,\r\n                        stroke: new ol.style.Stroke({\r\n                            color: 'rgba(0, 0, 0, 0.7)'\r\n                        }),\r\n                        fill: new ol.style.Fill({\r\n                            color: 'rgba(255, 255, 255, 0.2)'\r\n                        })\r\n                    })\r\n                })\r\n            });\r\n            that.map.addInteraction(measure.draw);\r\n\r\n            that.createMeasureTooltip(); //创建测量工具提示框\r\n            that.createHelpTooltip(); //创建帮助提示框\r\n\r\n            var listener;\r\n            //绑定交互绘制工具开始绘制的事件\r\n            measure.draw.on('drawstart',\r\n                function (evt) {\r\n                    // set sketch\r\n                    measure.sketch = evt.feature; //绘制的要素\r\n                    /** @type {ol.Coordinate|undefined} */\r\n                    var tooltipCoord = evt.coordinate; // 绘制的坐标\r\n                    //绑定change事件，根据绘制几何类型得到测量长度值或面积值，并将其设置到测量工具提示框中显示\r\n                    listener = measure.sketch.getGeometry().on('change', function (evt) {\r\n                        var geom = evt.target; //绘制几何要素\r\n                        var output;\r\n                        if (geom instanceof ol.geom.Polygon) {\r\n                            output = that.formatArea( /** @type {ol.geom.Polygon} */ (geom)); //面积值\r\n                            tooltipCoord = geom.getInteriorPoint().getCoordinates(); //坐标\r\n                        } else if (geom instanceof ol.geom.LineString) {\r\n                            output = that.formatLength( /** @type {ol.geom.LineString} */ (geom)); //长度值\r\n                            tooltipCoord = geom.getLastCoordinate(); //坐标\r\n                        }\r\n                        measure.measureTooltipElement.innerHTML = output; //将测量值设置到测量工具提示框中显示\r\n                        measure.measureTooltip.setPosition(tooltipCoord); //设置测量工具提示框的显示位置\r\n                    });\r\n                }, this);\r\n            //绑定交互绘制工具结束绘制的事件\r\n            measure.draw.on('drawend',\r\n                function (evt) {\r\n                    measure.measureTooltipElement.className = 'tooltip tooltip-static'; //设置测量提示框的样式\r\n                    measure.measureTooltip.setOffset([0, -7]);\r\n                    measure.sketch = null; //置空当前绘制的要素对象\r\n                    measure.measureTooltipElement = null; //置空测量工具提示框对象\r\n                    that.createMeasureTooltip(); //重新创建一个测试工具提示框显示结果\r\n                    ol.Observable.unByKey(listener);\r\n                }, this);\r\n        },\r\n\r\n        /**\r\n         *创建一个新的帮助提示框（tooltip）\r\n         */\r\n        createHelpTooltip() {\r\n            let measure = MapMeasure;\r\n            let that = this;\r\n            if (measure.helpTooltipElement) {\r\n                measure.helpTooltipElement.parentNode.removeChild(measure.helpTooltipElement);\r\n            }\r\n            measure.helpTooltipElement = document.createElement('div');\r\n            measure.helpTooltipElement.className = 'tooltip hidden';\r\n            measure.helpTooltip = new ol.Overlay({\r\n                element: measure.helpTooltipElement,\r\n                offset: [15, 0],\r\n                positioning: 'center-left'\r\n            });\r\n            that.map.addOverlay(measure.helpTooltip);\r\n        },\r\n        /**\r\n         *创建一个新的测量工具提示框（tooltip）\r\n         */\r\n        createMeasureTooltip() {\r\n            let measure = MapMeasure;\r\n            let that = this;\r\n            if (measure.measureTooltipElement) {\r\n                measure.measureTooltipElement.parentNode.removeChild(measure.measureTooltipElement);\r\n            }\r\n            measure.measureTooltipElement = document.createElement('div');\r\n\r\n            measure.measureTooltipElement.className = 'tooltip tooltip-measure';\r\n            measure.measureTooltip = new ol.Overlay({\r\n                element: measure.measureTooltipElement,\r\n                offset: [0, -15],\r\n                positioning: 'bottom-center'\r\n            });\r\n            measure.measureTooltip.cls == \"MeasureTooltip\"\r\n            that.map.addOverlay(measure.measureTooltip);\r\n        },\r\n\r\n        /**\r\n         * 测量长度输出\r\n         * @param {ol.geom.LineString} line\r\n         * @return {string}\r\n         */\r\n        formatLength(line) {\r\n            let measure = MapMeasure;\r\n            let that = this;\r\n            var coordinates = line.getCoordinates(); //解析线的坐标\r\n            var length = 0;\r\n            var sourceProj = that.map.getView().getProjection(); //地图数据源投影坐标系\r\n            //通过遍历坐标计算两点之前距离，进而得到整条线的长度\r\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\r\n                var c1 = ol.proj.transform(coordinates[i], sourceProj, 'EPSG:4326');\r\n                var c2 = ol.proj.transform(coordinates[i + 1], sourceProj, 'EPSG:4326');\r\n                length += measure.wgs84Sphere.haversineDistance(c1, c2);\r\n            }\r\n            var output;\r\n            if (length > 100) {\r\n                output = (Math.round(length / 1000 * 100) / 100) + ' ' + 'km'; //换算成KM单位\r\n            } else {\r\n                output = (Math.round(length * 100) / 100) + ' ' + 'm'; //m为单位\r\n            }\r\n            return output; //返回线的长度\r\n        },\r\n        /**\r\n         * 测量面积输出\r\n         * @param {ol.geom.Polygon} polygon\r\n         * @return {string}\r\n         */\r\n        formatArea(polygon) {\r\n            let measure = MapMeasure;\r\n            let that = this;\r\n            var sourceProj = that.map.getView().getProjection(); //地图数据源投影坐标系\r\n            var geom = /** @type {ol.geom.Polygon} */ (polygon.clone().transform(sourceProj, 'EPSG:4326')); //将多边形要素坐标系投影为EPSG:4326\r\n            var coordinates = geom.getLinearRing(0).getCoordinates(); //解析多边形的坐标值\r\n            var area = Math.abs(measure.wgs84Sphere.geodesicArea(coordinates)); //获取面积\r\n            var output;\r\n            if (area > 10000) {\r\n                output = (Math.round(area / 1000000 * 100) / 100) + ' ' + 'km<sup>2</sup>'; //换算成KM单位\r\n            } else {\r\n                output = (Math.round(area * 100) / 100) + ' ' + 'm<sup>2</sup>'; //m为单位\r\n            }\r\n            return output; //返回多边形的面积\r\n        },\r\n        //搜索结果切换\r\n        resultChange(ele) {\r\n            let that = this;\r\n            if (!ele.hasClass('search-active')) {\r\n                ele.addClass('search-active').siblings().removeClass('search-active');\r\n            }\r\n            // clearA();\r\n            if (that.acitiveSearch == 1) {\r\n                var lon = ele.attr('data-lon') - 0;\r\n                var lat = ele.attr('data-lat') - 0;\r\n                var view = that.map.getView();\r\n                var zoom1 = view.getZoom();\r\n                view.setZoom(15);\r\n                //初始中心点\r\n                view.setCenter([lon, lat]);\r\n            } else if (that.acitiveSearch == 2) {\r\n                that.clearA();\r\n                var xmax = ele.attr('data-xmax') - 0;\r\n                var ymax = ele.attr('data-ymax') - 0;\r\n                var id = ele.attr('data-id');\r\n                var index = ele.attr('data-index');\r\n                // 单个高亮显示时候\r\n                var resultsSingles = Config.deepClone(that.roadResults);\r\n                resultsSingles.SFEleArray = [resultsSingles.SFEleArray[index]]; //应该拼成一个数组\r\n                resultsSingles.TotalCount = 1;\r\n                var format = new Zondy.Format.PolygonJSON();\r\n                var features = format.read(resultsSingles);\r\n                //实例化一个矢量图层drawLayerr用于高亮显示结果\r\n                var drawSource = new ol.source.Vector({\r\n                    wrapX: false\r\n                });\r\n                drawSource.addFeatures(features);\r\n\r\n                that.drawLayer1 = new ol.layer.Vector({\r\n                    source: drawSource,\r\n                    style: new ol.style.Style({\r\n                        //填充色\r\n                        fill: new ol.style.Fill({\r\n                            color: 'rgba(255,0, 0, 1)'\r\n                        }),\r\n                        //边线样式\r\n                        stroke: new ol.style.Stroke({\r\n                            color: 'rgba(255,0, 0, 1)',\r\n                            width: 12\r\n                        })\r\n                    })\r\n                });\r\n                that.map.addLayer(that.drawLayer1);\r\n                var view = that.map.getView();\r\n                var zoom1 = view.getZoom();\r\n                view.setZoom(15);\r\n                //初始中心点\r\n                view.setCenter([xmax, ymax]);\r\n            }\r\n        },\r\n        init() {\r\n            let that = this;\r\n            let measure = MapMeasure;\r\n            // 初始化图层树控件\r\n            that.loadLayersControl(that.map, Config.mapTreeId);\r\n            // 挂载点击事件\r\n            that.clickEventsGroups();\r\n            // 初始化专题服务类\r\n            that.operInit();\r\n            // 初始化左下角专题图框选择\r\n            that.mapListInit();\r\n            //实现目录的隐藏和显示\r\n            if ($(\".menu-trigger\").length > 0) {\r\n                $(\".menu-trigger\").on(\"click\", function () {\r\n                    that.toggleMenu();\r\n                })\r\n            }\r\n            // poi搜索\r\n            $(\"#gis-search\").on('click', function () {\r\n                that.clearA();\r\n                that.acitiveSearch = 1;\r\n                var val = $(\"#search-input\").val();\r\n                // if (inputSearch){\r\n                //     map.removeLayer(vectorLayer);\r\n                // }\r\n                // if (vectorLayer) {\r\n                //     //移除高亮显示结果图层drawLayerr\r\n                //     map.removeLayer(vectorLayer);\r\n                //\r\n                // }\r\n                if (!val) {\r\n                    alert('您还没有输入信息呢！');\r\n                } else {\r\n                    that.inputSearch = val;\r\n                    that.queryByAttribute(val);\r\n                    $(\"#reslutTable\").show();\r\n                }\r\n            });\r\n            // 道路搜索\r\n            $(\"#road-search\").on('click', function () {\r\n                that.clearA();\r\n                that.acitiveSearch = 2;\r\n                var val = $(\"#search-input\").val();\r\n                if (that.inputSearch) {\r\n                    that.map.removeLayer(that.vectorLayer);\r\n                }\r\n                if (!val) {\r\n                    alert('您还没有输入信息呢！');\r\n                } else {\r\n                    that.inputSearch = val;\r\n                    that.roadQueryByAttribute(val);\r\n                    $(\"#reslutTable\").show();\r\n                }\r\n            });\r\n            // 搜索结果的点击切换\r\n            $(\"#reslutTable>ul\").on('click', 'li', function () {\r\n                let _that = $(this);\r\n                that.resultChange(_that);\r\n            });\r\n            // 右下角地图切换\r\n            $('#vecmap').on('click', function () {\r\n                LayerGroup.vecLayergroup.getLayersArray()[0].setZIndex(-1);\r\n                LayerGroup.vecLayergroup.getLayersArray()[1].setZIndex(-1);\r\n                LayerGroup.imgLayergroup.getLayersArray()[0].setZIndex(-2);\r\n                LayerGroup.imgLayergroup.getLayersArray()[1].setZIndex(-2);\r\n\r\n                $(\"#vecmap\").css(\"border-color\", \"rgba(0, 255, 255,0.8)\");\r\n                $(\"#imgmap\").css(\"border-color\", \"rgba(255, 255, 255,0.8)\");\r\n\r\n\r\n            });\r\n            //关闭搜索列表页面\r\n            $(\"#close-search\").on('click', function () {\r\n                that.clearA();\r\n                $(\"#reslutTable\").hide();\r\n                $(\"#reslutTable ul\").html('');\r\n                //alert(1);\r\n                //vectorLayer = null;\r\n                that.map.removeLayer(that.vectorLayer);\r\n            });\r\n            $('#imgmap').on('click', function () {\r\n                LayerGroup.imgLayergroup.getLayersArray()[0].setZIndex(-1);\r\n                LayerGroup.imgLayergroup.getLayersArray()[1].setZIndex(-1);\r\n                LayerGroup.vecLayergroup.getLayersArray()[0].setZIndex(-2);\r\n                LayerGroup.vecLayergroup.getLayersArray()[1].setZIndex(-2);\r\n                $(\"#vecmap\").css(\"border-color\", \"rgba(255, 255, 255,0.8)\");\r\n                $(\"#imgmap\").css(\"border-color\", \"rgba(0, 255, 255,0.8)\");\r\n\r\n            });\r\n            $('.commontool').find(\"span\").click(function () {\r\n                $(this).parent().find(\"span\").each(function () {\r\n                    $(this).removeClass('a_click');\r\n                });\r\n                $(this).addClass('a_click');\r\n                if (measure.draw != null) {\r\n                    that.map.removeInteraction(measure.draw); //移除绘制图形\r\n                    measure.draw = null;\r\n                }\r\n                if ($(this).attr(\"title\") == \"退出测量\") {\r\n                    that.map.un('pointermove', that.pointerMoveHandler); //地图容器绑定鼠标移动事件，动态显示帮助提示框内容\r\n                    if (measure.helpTooltipElement) {\r\n                        measure.helpTooltipElement.parentNode.removeChild(measure.helpTooltipElement);\r\n                        measure.helpTooltipElement = null;\r\n                    }\r\n                    if (measure.meaurserVector) {\r\n                        that.map.removeLayer(measure.meaurserVector);\r\n                        measure.meaurserVector = null;\r\n                        measure.measure_source = null;\r\n                    }\r\n                    if (measure.measureTooltipElement) {\r\n                        var len = that.map.getOverlays().getLength();\r\n                        var j = 0;\r\n                        for (var i = 0; i < len; i++) {\r\n                            that.map.removeOverlay(that.map.getOverlays().getArray()[j]);\r\n                        }\r\n                        measure.measureTooltipElement = null;\r\n                    }\r\n                    return;\r\n                }\r\n                if ($(this).attr(\"title\") == \"距离测量\" || $(this).attr(\"title\") == \"面积测量\") {\r\n                    measure.measuertype = $(this).attr(\"title\");\r\n                    if (measure.meaurserVector == null) {\r\n                        measure.measure_source = new ol.source.Vector();\r\n                        //加载测量的绘制矢量层\r\n                        measure.meaurserVector = new ol.layer.Vector({\r\n                            source: measure.measure_source,\r\n                            style: new ol.style.Style({ //图层样式\r\n                                fill: new ol.style.Fill({\r\n                                    color: 'rgba(255, 255, 255, 0.6)' //填充颜色\r\n                                }),\r\n                                stroke: new ol.style.Stroke({\r\n                                    color: '#ff0000', //边框颜色\r\n                                    width: 5 // 边框宽度\r\n                                }),\r\n                                image: new ol.style.Circle({\r\n                                    radius: 7,\r\n                                    fill: new ol.style.Fill({\r\n                                        color: '#ff0000'\r\n                                    })\r\n                                })\r\n                            })\r\n                        });\r\n                        that.map.addLayer(measure.meaurserVector);\r\n                    }\r\n\r\n                    that.map.on('pointermove', that.pointerMoveHandler); //地图容器绑定鼠标移动事件，动态显示帮助提示框内容\r\n                    //地图绑定鼠标移出事件，鼠标移出时为帮助提示框设置隐藏样式\r\n                    $(that.map.getViewport()).on('mouseout', function () {\r\n                        $(that.helpTooltipElement).addClass('hidden');\r\n                    });\r\n                    that.addInteraction(); //添加绘图进行测量\r\n                }\r\n\r\n                if ($(this).attr(\"title\") == \"地图导出\") {\r\n\r\n                    document.execCommand('SaveAs');\r\n                    that.map.once('postcompose', function (event) {\r\n                        var canvas = event.context.canvas;\r\n                        if (navigator.msSaveBlob) {\r\n                            navigator.msSaveBlob(canvas.msToBlob(), 'map.png');\r\n                        } else {\r\n                            canvas.toBlob(function (blob) {\r\n                            });\r\n                        }\r\n                    });\r\n                    that.map.renderSync();\r\n                }\r\n            });\r\n            // popup标注隐藏\r\n            $('#popup-closer').click(function () {\r\n                //未定义popup位置\r\n                popup.setPosition(undefined);\r\n                //失去焦点\r\n                $('#popup-closer')[0].blur();\r\n                clearA();\r\n                return false;\r\n            });\r\n            $('#vecmap').click();\r\n        }\r\n    };\r\n    Base.init();\r\n});"]}